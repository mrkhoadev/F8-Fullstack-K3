import {
    handleDataResults,
    mapKeywords,
    musicKeywords,
    videoKeywords,
    handleKeywordSearch,
} from "./modules/data.js";

//khai b√°o c√°c object (ƒë·ªëi t∆∞·ª£ng) ƒë·ªÉ s·ª≠ d·ª•ng
var SpeechRecognition = SpeechRecognition || window.webkitSpeechRecognition;
var SpeechGrammarList = SpeechGrammarList || window.webkitSpeechGrammarList;
var SpeechRecognitionEvent =
    SpeechRecognitionEvent || window.webkitSpeechRecognitionEvent;

// T·∫°o m·ªôt th·ªÉ hi·ªán m·ªõi c·ªßa SpeechRecognition
const voiceSearchRecognition = new SpeechRecognition();
const activationRecognition = new SpeechRecognition();

// ƒê·∫∑t m·ªôt s·ªë thu·ªôc t√≠nh cho vi·ªác nh·∫≠n di·ªán
const setupVoiceSearchRecognition = function (
    recognition,
    continuous,
    lang,
    interimResults
) {
    recognition.continuous = continuous; //(true -> cho ph√©p thu √¢m li√™n t·ª•c, false -> d·ª´ng thu √¢m ngay khi c√≥ d·ªØ li·ªáu)
    recognition.lang = lang; // S·ª≠ d·ª•ng thu √¢m
    recognition.interimResults = interimResults; // (true -> ki·ªÉm tra k·∫øt qu·∫£ li√™n t·ª•c, false -> ki·ªÉm tra k·∫øt qu·∫£ sau 1 kho·∫£ng th·ªùi gian)
    recognition.maxAlternatives = 1;
};
setupVoiceSearchRecognition(voiceSearchRecognition, true, "vi-VN", true);
setupVoiceSearchRecognition(
    activationRecognition,
    false,
    "vi-VN",
    false
);

const micBtn = document.querySelector(".mic");
const outputHTML = document.querySelector(".text");
const loading = document.querySelector(".pl");
const activeMicBtn = "m·ªü t√¨m ki·∫øm";
let isActivated = false;

const handleActiveMic = function () {
    micBtn.classList.add("active");
    loading.classList.add("active");
    isActivated = true;
    voiceSearchRecognition.stop();
};

const handleEndOfSearch = function () {
    micBtn.classList.remove("active");
    loading.classList.remove("active");
};
// X·ª≠ l√Ω s·ª± ki·ªán k·∫øt qu·∫£ ƒë·ªÉ "k√≠ch ho·∫°t" t√¨m ki·∫øm b·∫±ng gi·ªçng n√≥i
voiceSearchRecognition.onresult = (event) => {
    const lastResult = event.results[event.results.length - 1];
    const recognizedText = lastResult[0].transcript
        .toLowerCase()
        .replaceAll(/[.,?]/g, "")
        .trim();

    if (recognizedText.includes(activeMicBtn)) {
        handleActiveMic();
    }
};

voiceSearchRecognition.start();

// X·ª≠ l√Ω khi k·∫øt th√∫c l·∫Øng nghe
const handleOnendVoiceSearch = () => {
    return new Promise((resolve) => {
        if (!isActivated) {
            handleEndOfSearch();
            voiceSearchRecognition.start();
        } else {
            activationRecognition.start();
            resolve();
        }
    });
};
voiceSearchRecognition.onend = function () {
    // B·∫Øt ƒë·∫ßu l·∫Øng nghe l·∫°i sau m·ªôt kho·∫£ng th·ªùi gian
    (async () => await handleOnendVoiceSearch())();
};

voiceSearchRecognition.onerror = function (event) {
    // B·∫Øt ƒë·∫ßu l·∫Øng nghe l·∫°i sau m·ªôt kho·∫£ng th·ªùi gian
    if (event.error !== "no-speech") {
        outputHTML.innerHTML = `<span style="color: red;">ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën "${event.error}"</span>`;
    } 
    isActivated = false;
};

activationRecognition.onstart = (event) => {
    outputHTML.innerHTML =
        "H√£y n√≥i theo c√°ch c·ªßa b·∫°n, c√≤n c√≥ ra k·∫øt qu·∫£ kh√¥ng l√† vi·ªác c·ªßa t√¥i üëå";
};

// X·ª≠ l√Ω s·ª± ki·ªán k·∫øt qu·∫£ ƒë·ªÉ t√¨m ki·∫øm b·∫±ng gi·ªçng n√≥i
const getStatus = (recognizedText, textSearch) => {
    return new Promise((resolve) => {
        const request = handleDataResults(recognizedText).request
        const links = handleDataResults(recognizedText).links;
        if (request !== "" || links !== "") {
            let result = "";
            let check = true
            if (handleKeywordSearch(recognizedText, mapKeywords)) {
                result = `ƒêang m·ªü ƒë·ªãa ƒëi·ªÉm`;
            } else if (handleKeywordSearch(recognizedText, musicKeywords)) {
                result = `ƒêang m·ªü b√†i h√°t`;
            } else if (handleKeywordSearch(recognizedText, videoKeywords)) {
                result = `ƒêang m·ªü video`;
            } else {
                check = false
                outputHTML.innerHTML = `<span style="color: green;">ƒêang m·ªü ${recognizedText}</span>`;
            }
            if (check) {
                outputHTML.innerHTML = `<span style="color: green;">${result} ${request}</span>`;
            } else {
                if (recognizedText.includes("m·ªü")) {
                    outputHTML.innerHTML = `<span style="color: green;">ƒêang ${recognizedText}</span>`;
                } else {
                    outputHTML.innerHTML = `<span style="color: green;">ƒêang m·ªü ${recognizedText}</span>`;
                }
            }
            micBtn.classList.remove("active");
            setTimeout(() => {
                window.open(links, "_blank");
                resolve();
            }, 3000);
            isActivated = false;
        } else {
            outputHTML.innerHTML = `<span style="color: blue;">Kh√¥ng th·ªÉ t√¨m th·∫•y "${textSearch}", h√£y th·ª≠ l·∫°i!</span>`;
            resolve();
        }
    });
};
activationRecognition.onresult = (event) => {
    if (isActivated) {
        const lastResult = event.results[event.results.length - 1];
        const recognizedText = lastResult[0].transcript
            .toLowerCase()
            .replaceAll(/[.,?]/g, "")
            .trim();
        
        let textSearch = event.results[0][0].transcript
        let firstChar = textSearch.charAt(0).toUpperCase();
        textSearch = firstChar + textSearch.slice(1).replace(/[.,?]/g, "");
        (async () => {
            await getStatus(recognizedText, textSearch);
            isActivated = false;
            handleEndOfSearch();
        })();
    }
};
const handleOnSpeechendActivationRecognition = () => {
    return new Promise((resolve) => {
        if (isActivated) {
            handleEndOfSearch();
        }
        voiceSearchRecognition.start();
        resolve();
    });
};
activationRecognition.onspeechend = () => {
    // X·ª≠ l√Ω khi d·ª´ng thu √¢m
    (async () => await handleOnSpeechendActivationRecognition())();
};
activationRecognition.onend = () => {
    isActivated = false
}

micBtn.addEventListener("click", function () {
    handleActiveMic();
});

document.addEventListener("visibilitychange", function () {
    if (document.hidden) {
        outputHTML.innerHTML =
            'H√£y n√≥i "M·ªü t√¨m ki·∫øm" ho·∫∑c b·∫•m v√¥ c√°i mic ·ªü tr√™n ƒë·ªÉ ti·∫øp t·ª•c üëå';
    }
});

// X·ª≠ l√Ω l·ªói n·∫øu c√≥
activationRecognition.onerror = function (event) {
    if (event.error === "no-speech") {
        outputHTML.innerHTML = `<span style="color: blue;">N√≥i g√¨ ƒëi ch·ª©???</span>`;
        activationRecognition.stop()
    } else {
        outputHTML.innerHTML = `<span style="color: red;">ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën "${event.error}"</span>`;
    }
    isActivated = false;
    handleEndOfSearch();
    setTimeout(() => {
        outputHTML.innerHTML =
            'H√£y n√≥i "M·ªü t√¨m ki·∫øm" ho·∫∑c b·∫•m v√¥ c√°i mic ·ªü tr√™n ƒë·ªÉ ti·∫øp t·ª•c üëå';
    }, 5000);
};

console.log("L∆∞u √Ω: ");
console.log("Ch·ªâ c√≥ th·ªÉ ho·∫°t ƒë·ªông t·ªët ·ªü chrome v√† c·ªëc c·ªëc v√† edge!");
console.log("Ki·ªÉm tra xem c√≥ b·∫≠t trang web n√†o s·ª≠ d·ª•ng mic kh√¥ng, c√≥ th√¨ t·∫Øt n√≥ ƒëi th√¨ trang n√†y m·ªõi ch·∫°y ƒë∆∞·ª£c :v");
